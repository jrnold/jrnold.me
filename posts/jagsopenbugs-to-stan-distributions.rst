.. title: JAGS/OpenBUGS to Stan Distributions
.. slug: jagsopenbugs-to-stan-distributions
.. date: 2013/02/06 23:33:00
.. tags: Bayesian, BUGS, JAGS, stan
.. link: 
.. description: 

Concordance between distributions in JAGS 3.3.0, OpenBUGS 3.3.2, and
Stan 1.1.0.

Since this is meant for translating code in BUGS dialects to Stan, it
only includes distributions in JAGS and OpenBUGS; Stan contains
distributions that are not present in either of those.

Distributions with their name in **bold** are not in Stan; in *italics*
have different parameterization.

General differences in the parameterizations of distributions in
JAGS/OpenBUGS and Stan.

-  JAGS/OpenBUGS tend to parameterize distributions in terms of the
   precision or rate, Stan uses scale.

-  For distributions with degrees of freedom or number of samples,
   JAGS/OpenBUGS tend to put that parameter last, Stan tends to put it
   first.

References

-  “JAGS Version 3.3.0 user manual”, October 1, 2012, Chapter 6,
   `link <http://sourceforge.net/projects/mcmc-jags/files/Manuals/3.x/jags_user_manual.pdf/download>`__.

-  “OpenBUGS User Manual: Version 3.2.2 (July 2012)”,
   `link <http://www.openbugs.info/Manuals/ModelSpecification.html#ContentsAII>`__.

-  “Stan Modeling Language User’s Guide and Reference Manual”, Stan
   Version 1.1.0, Chapters 24-25.
   `link <http://stan.googlecode.com/files/stan-reference-1.1.0.pdf>`__.

Univariate Continuous Distributions
===================================

+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| Name                            | JAGS                           | OpenBUGS                    | Stan                                    |
+=================================+================================+=============================+=========================================+
| Beta                            | ``dbeta(a, b)``                | ``dbeta(a, b)``             | ``beta(a, b)``                          |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| Chi-Square                      | ``dchisqr(k)``                 | ``dchisq(k)``               | ``chi_square(k)``                       |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Double Exponential*            | ``ddexp(mu, tau)``             | ``ddexp(mu, tau)``          | ``double_exponential(mu, 1.0 / tau)``   |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| Exponential                     | ``dexp(lambda)``               | ``dexp(lambda)``            | ``exponential(lambda)``                 |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **F**                           | ``df(n, m)``                   | ``df(n, m, 0.0, 1.0)``      |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Flat*                          |                                | ``dflat()``                 | Note [1]_                               |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| Gamma                           | ``dgamma(r, lambda)``          | ``dgamma(r,  mu)``          | ``gamma(r, lambda)``                    |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **Generalized Extreme Value**   |                                | ``dgev(mu, sigma, eta)``    |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **Generalized F**               |                                | ``df(n, m, mu, tau)``       |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **Generalized Gamma**           | ``dgen.gamma(r, lambda, b)``   | ``dggamma(r, lambda, b)``   |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **Generalized Pareto**          |                                | ``dgpar(mu, sigma, eta)``   |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Generic Loglikelihood*         |                                | ``dloglik(lambda)``         | Note [2]_                               |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Logistic*                      | ``dlogis(mu, tau)``            |                             | ``logistic(mu, 1.0 / tau)``             |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| **Non-central Chi-square**      | ``dnchisqr(k, delta)``         |                             |                                         |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Log-Normal*                    |                                | ``dlnorm(mu, tau)``         | ``log_normal(mu, pow(tau, -0.5))``      |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Normal*                        | ``dnorm(mu, tau)``             | ``dnorm(mu, tau)``          | ``normal(mu, pow(tau, -0.5))``          |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Pareto*                        | ``dpar(alpha, c)``             | ``dpar(alpha, c)``          | ``pareto(pow(c, alpha), alpha)``        |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Student-t*                     | ``dt(mu, tau, k)``             | ``dt(mu, tau, k)``          | ``student_t(k, mu, pow(tau, -0.5))``    |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| Uniform                         | ``dunif(a, b)``                | ``dunif(a, b)``             | ``uniform(a, b)``                       |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+
| *Weibull*                       | ``dweib(v, lambda)``           | ``dweib(v, lambda)``        | ``weibull(v, pow(lambda, -1.0 / v))``   |
+---------------------------------+--------------------------------+-----------------------------+-----------------------------------------+

Univariate Discrete Distributions
====================================

+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| Name                             | JAGS                          | OpenBUGS                      | Stan                               |
+==================================+===============================+===============================+====================================+
| *Beta binomial*                  | ``dbetabin(a, b, n)``         |                               | ``beta_binomial(n, a, b)``         |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| Bernoulli                        | ``dbern(p)``                  | ``dbern(p)``                  | ``bernoulli(p)``                   |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| *Binomial*                       | ``dbin(p, n)``                | ``dbin(p, n)``                | ``binomial(n, p)``                 |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| Categorical                      | ``dcat(pi)``                  | ``dcat(pi[])``                | ``categorical(pi)``                |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| *Hypergeometric*                 | ``dhyper(n1, n2, m1, 1.0)``   | ``dhyper(n1, n2, m1, 1.0)``   | ``hypergeometric(m1, n1, n2)``     |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| **Non-central Hypergeometric**   | ``dhyper(n1, n2, m1, psi``    | ``dhyper(n1, n2, m1, psi)``   |                                    |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| *Negative Binomial*              | ``dnegbin(p, r)``             | ``dnegbin(p, r)``             | ``neg_binomial(r, p / (1 - p))``   |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+
| Poisson                          | ``dpois(lambda)``             | ``dpois(lambda)``             | ``poisson(lambda)``                |
+----------------------------------+-------------------------------+-------------------------------+------------------------------------+

Multivariate Distributions
==========================

+----------------------------+-------------------------+------------------------------+----------------------------------------------+
| Name                       | JAGS                    | OpenBUGS                     | Stan                                         |
+============================+=========================+==============================+==============================================+
| Dirichlet                  | ``ddirch(alpha)``       | ``ddirich(alpha[])``         | ``dirichlet(alpha)``                         |
+----------------------------+-------------------------+------------------------------+----------------------------------------------+
| *Multivariate normal*      | ``dmnorm(mu, Omega)``   | ``dmnorm(mu[], Omega[,])``   | ``multi_normal_prec(mu, Omega)``             |
+----------------------------+-------------------------+------------------------------+----------------------------------------------+
| *Wishart*                  | ``dwish(R, k)``         | ``dwish(R[,], k)``           | ``wishart(k, R)``                            |
+----------------------------+-------------------------+------------------------------+----------------------------------------------+
| *Multivariate Student t*   | ``dmt(mu, Omega, k)``   | ``dmt(mu[], Omega[,], k)``   | ``multi_student_t(k, mu, inverse(Omega))``   |
+----------------------------+-------------------------+------------------------------+----------------------------------------------+
| *Multinomial*              | ``dmulti(pi, n)``       | ``dmulti(pi[], n)``          | ``multinomial(pi * n)``                      |
+----------------------------+-------------------------+------------------------------+----------------------------------------------+

.. [1]
   If no distribution is assigned to a parameter in Stan, it is assigned
   an improper uniform prior.

.. [2]
   Generic distributions are implemented in Stan by directly altering
   the value of ``lp__``. See “Chapter 12: Custom Probability Functions”
   in the *Stan Manual*.

